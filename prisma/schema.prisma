datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String @id @default(cuid())
  email         String @unique
  password      Password?
  
  notes         Note[]

  commit        Commit[]

  createdPosts  Post[]
  posts         PostsOnUsers[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Password {
  hash   String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id        String @id @default(cuid())
  title     String
  body      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model File {
  id        String @id @default(cuid())
  name      String
  path      String

  commits   FilesOnCommits[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Commit {
  id        String @id @default(cuid())
  message   String
  isTag     Boolean
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post  @relation(fields: [postSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  postSlug  String

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String

  files    FilesOnCommits[]
}

model FilesOnCommits {
  commit       Commit   @relation(fields: [commitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commitId     String 
  file         File     @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId       String 

  @@id([commitId, fileId])
}

model Post {
  // id       String @id @default(cuid())
  slug           String @id
  title          String 
  markdown       String

  // parent and children 
  parentId       String?
  parent         Post?   @relation("ParentChildren", fields: [parentId], references: [slug])
  children       Post[]  @relation("ParentChildren")

  commits        Commit[]

  users          PostsOnUsers[]
  creatorUser    User    @relation(fields: [creatorUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorUserId  String 
    
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PostsOnUsers {
  post         Post     @relation(fields: [postSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  postSlug     String 
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String 

  @@id([postSlug, userId])
}