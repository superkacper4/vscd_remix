datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  post    Post[]
  commit    Commit[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model File {
  id   String @id @default(cuid())
  name   String
  path String

  commits FilesOnCommits[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Commit {
  id       String @id @default(cuid())
  message  String
  isTag    Boolean
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post     Post  @relation(fields: [postSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  postSlug String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  files FilesOnCommits[]
}

model FilesOnCommits {
  commit       Commit   @relation(fields: [commitId], references: [id])
  commitId     String 
  file         File     @relation(fields: [fileId], references: [id])
  fileId       String 

  @@id([commitId, fileId])
}

model Post {
  slug     String @id
  title    String
  markdown String
  file     String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  commits Commit[]
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}